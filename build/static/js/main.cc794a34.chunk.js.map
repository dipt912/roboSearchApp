{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","Api/index.js","actions.js","constants.js","containers/App.js","registerServiceWorker.js","Reducers/searchRobots.js","Reducers/requestUsers.js","Reducers/index.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","fetchRobots","fetch","then","response","json","err","fetchUsers","dispatch","a","payload","console","log","App","onSearchChange","event","target","value","this","onFetchUser","filteredRobots","filter","robot","toLowerCase","includes","length","Component","connect","state","searchRobots","searchField","requestUsers","isPending","error","text","setSearchField","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","intialStage","rootReducer","action","rootReducers","combineReducers","logger","createLogger","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.cc794a34.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","export const fetchRobots = () => {\n    try{\n       return  fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=> response.json())\n\n    } catch (err) {\n        throw err;\n    }\n}","import { \n    CHANGE_SEARCH_FIELD,\n    FETCH_USER_START,\n    FETCH_USER_PENDING,\n    FETCH_USER_ERROR,\n    FETCH_USER_SUCCESS\n         } from './constants.js';\nimport { fetchRobots } from './Api'\n\nexport const  setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const fetchUsers = async (dispatch) => {\n    dispatch({type: FETCH_USER_START})\n\n    try {\n        dispatch({type: FETCH_USER_PENDING})\n        const user = await fetchRobots();\n        dispatch({type: FETCH_USER_SUCCESS, payload: user})\n        console.log('users', user)\n    } catch(err) {\n        dispatch({type: FETCH_USER_ERROR})\n    }\n   \n}\n\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const FETCH_USER_START = 'FETCH_USER_START';\n\nexport const FETCH_USER_PENDING = 'FETCH_USER_PENDING';\nexport const FETCH_USER_SUCCESS = 'FETCH_USER_SUCCESS';\nexport const FETCH_USER_ERROR = 'FETCH_USER_ERROR';\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\nimport { setSearchField, fetchUsers } from '../actions';\n\nclass App extends Component {\n  // constructor() {\n  //   super()\n  // }\n\n  componentDidMount() {\n    this.props.onFetchUser()\n  }\n\n  onSearchChange = (event) => {\n    this.props.onSearchChange(event.target.value)\n  }\n\n  render() {\n    const { searchfield, robots } = this.props;\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    })\n    return !robots.length ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>RoboFriends</h1>\n          <SearchBox searchChange={this.onSearchChange}/>\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    searchfield: state.searchRobots.searchField,\n    robots : state.requestUsers.robots,\n    isPending : state.requestUsers.isPending,\n    error : state.requestUsers.error,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange : (text) => dispatch(setSearchField(text)),\n    onFetchUser : () => fetchUsers(dispatch),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport { CHANGE_SEARCH_FIELD } from '../constants.js';\n\nconst intialStage = {\n    searchField : '',\n}\n\nexport const searchRobots = (state=intialStage, action = {}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n           return { ...state, searchField : action.payload } \n        default:\n        return state;   \n    }\n}\n","\nimport { FETCH_USER_SUCCESS, FETCH_USER_ERROR , FETCH_USER_PENDING } from '../constants.js';\n\nconst intialStage = {\n    robots : [],\n    isPending: false,\n    error : '',\n}\n\n\n\n\nexport const requestUsers = (state = intialStage, action = {}) => {\n    switch (action.type) {\n        case FETCH_USER_SUCCESS:\n            return { ...state, robots: action.payload, isPending: false }\n        case FETCH_USER_ERROR:\n            return { ...state, isPending: false, error: 'Failed To fetch users' }\n        case FETCH_USER_PENDING:\n            return { ...state, isPending: true }\n        default:\n            return state;\n    }\n}","import { searchRobots } from './searchRobots';\nimport { requestUsers } from './requestUsers'\nexport const rootReducer = {\n    searchRobots:searchRobots,\n    requestUsers:requestUsers,\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger'\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { rootReducer } from './Reducers/index'\nimport 'tachyons';\nconst rootReducers = combineReducers(rootReducer)\nconst logger = createLogger();\nconst store = createStore(rootReducers, applyMiddleware(logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>\n    , document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}